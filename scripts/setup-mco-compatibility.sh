#!/usr/bin/env bash

# Copyright (C) 2021-2024 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Setup fake Machine Config Operator (MCO) resources for certsuite compatibility
#
# This script creates the necessary MCO API resources to make platform alteration
# tests work with microshift or clusters that don't have MCO installed.
#
# Usage:
#   ./setup-mco-compatibility.sh [install|remove|check] [version]
#
# Examples:
#   ./setup-mco-compatibility.sh install 4.14.0
#   ./setup-mco-compatibility.sh remove
#   ./setup-mco-compatibility.sh check

set -euo pipefail

# Default values
DEFAULT_OPENSHIFT_VERSION="4.14.0"
MACHINECONFIG_CRD_NAME="machineconfigs.machineconfiguration.openshift.io"
MACHINECONFIGPOOL_CRD_NAME="machineconfigpools.machineconfiguration.openshift.io"
CONTAINERRUNTIMECONFIG_CRD_NAME="containerruntimeconfigs.machineconfiguration.openshift.io"
KUBELETCONFIG_CRD_NAME="kubeletconfigs.machineconfiguration.openshift.io"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    cat << EOF
Setup fake Machine Config Operator (MCO) resources for certsuite compatibility

USAGE:
    $0 [COMMAND] [VERSION]

COMMANDS:
    install     Install fake MCO resources (default)
    remove      Remove fake MCO resources
    check       Check current status
    help        Show this help message

ARGUMENTS:
    VERSION     OpenShift version to simulate (default: ${DEFAULT_OPENSHIFT_VERSION})

EXAMPLES:
    $0 install 4.14.0              Install with OpenShift 4.14.0
    $0 install                     Install with default version (${DEFAULT_OPENSHIFT_VERSION})
    $0 remove                      Remove all fake MCO resources
    $0 check                       Check if fake MCO resources exist

DESCRIPTION:
    This script helps platform alteration tests work with microshift or clusters
    without MCO by creating fake machineconfiguration.openshift.io API resources.
    
    Without this, tests that try to access MachineConfigs will fail with
    "the server could not find the requested resource" errors.

WARNING:
    This creates fake MCO resources that may cause some MCO-specific tests to run
    and potentially fail if the underlying system doesn't support machine configuration.
EOF
}

# Function to check if oc command is available
check_oc_command() {
    if ! command -v oc &> /dev/null; then
        print_error "oc command not found. Please install the OpenShift CLI."
        exit 1
    fi
}

# Function to check if connected to a cluster
check_cluster_connection() {
    if ! oc cluster-info &> /dev/null; then
        print_error "Not connected to a Kubernetes/OpenShift cluster."
        print_info "Please ensure you're connected to your cluster."
        exit 1
    fi
}

# Function to check if MCO CRDs exist
machineconfig_crd_exists() {
    oc get crd "$MACHINECONFIG_CRD_NAME" &> /dev/null
}

machineconfigpool_crd_exists() {
    oc get crd "$MACHINECONFIGPOOL_CRD_NAME" &> /dev/null
}

containerruntimeconfig_crd_exists() {
    oc get crd "$CONTAINERRUNTIMECONFIG_CRD_NAME" &> /dev/null
}

kubeletconfig_crd_exists() {
    oc get crd "$KUBELETCONFIG_CRD_NAME" &> /dev/null
}

# Function to create MachineConfig CRD
create_machineconfig_crd() {
    print_info "Creating MachineConfig CRD..."
    
    cat <<EOF | oc apply -f -
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: ${MACHINECONFIG_CRD_NAME}
  annotations:
    created-by: certsuite-mco-setup-script
spec:
  group: machineconfiguration.openshift.io
  versions:
  - name: v1
    served: true
    storage: true
    additionalPrinterColumns:
    - name: GENERATEDBYCONTROLLER
      type: string
      description: Generated by controller
      jsonPath: .metadata.labels.machineconfiguration\.openshift\.io/generated-by-controller
    - name: IGNITIONVERSION
      type: string
      description: Ignition version
      jsonPath: .spec.config.ignition.version
    - name: AGE
      type: date
      description: Creation time
      jsonPath: .metadata.creationTimestamp
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              config:
                type: object
                properties:
                  ignition:
                    type: object
                    properties:
                      version:
                        type: string
                  storage:
                    type: object
                    properties:
                      files:
                        type: array
                        items:
                          type: object
                  systemd:
                    type: object
                    properties:
                      units:
                        type: array
                        items:
                          type: object
              kernelArguments:
                type: array
                items:
                  type: string
              kernelType:
                type: string
              fips:
                type: boolean
              osImageURL:
                type: string
            x-kubernetes-preserve-unknown-fields: true
          status:
            type: object
            x-kubernetes-preserve-unknown-fields: true
  scope: Cluster
  names:
    plural: machineconfigs
    singular: machineconfig
    kind: MachineConfig
    shortNames:
    - mc
EOF

    print_success "MachineConfig CRD created successfully"
}

# Function to create MachineConfigPool CRD
create_machineconfigpool_crd() {
    print_info "Creating MachineConfigPool CRD..."
    
    cat <<EOF | oc apply -f -
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: ${MACHINECONFIGPOOL_CRD_NAME}
  annotations:
    created-by: certsuite-mco-setup-script
spec:
  group: machineconfiguration.openshift.io
  versions:
  - name: v1
    served: true
    storage: true
    additionalPrinterColumns:
    - name: CONFIG
      type: string
      description: Current configuration
      jsonPath: .status.configuration.name
    - name: UPDATED
      type: integer
      description: Updated machines
      jsonPath: .status.updatedMachineCount
    - name: UPDATING
      type: integer
      description: Updating machines
      jsonPath: .status.machineCount
    - name: DEGRADED
      type: integer
      description: Degraded machines
      jsonPath: .status.degradedMachineCount
    - name: MACHINECOUNT
      type: integer
      description: Total machines
      jsonPath: .status.machineCount
    - name: READYMACHINECOUNT
      type: integer
      description: Ready machines
      jsonPath: .status.readyMachineCount
    - name: AGE
      type: date
      description: Creation time
      jsonPath: .metadata.creationTimestamp
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              machineConfigSelector:
                type: object
                properties:
                  matchLabels:
                    type: object
                    additionalProperties:
                      type: string
                  matchExpressions:
                    type: array
                    items:
                      type: object
              nodeSelector:
                type: object
                properties:
                  matchLabels:
                    type: object
                    additionalProperties:
                      type: string
                  matchExpressions:
                    type: array
                    items:
                      type: object
              configuration:
                type: object
                properties:
                  name:
                    type: string
                  source:
                    type: array
                    items:
                      type: object
              paused:
                type: boolean
              maxUnavailable:
                type: string
            x-kubernetes-preserve-unknown-fields: true
          status:
            type: object
            properties:
              observedGeneration:
                type: integer
                format: int64
              configuration:
                type: object
                properties:
                  name:
                    type: string
                  source:
                    type: array
                    items:
                      type: object
              machineCount:
                type: integer
                format: int32
              updatedMachineCount:
                type: integer
                format: int32
              readyMachineCount:
                type: integer
                format: int32
              unavailableMachineCount:
                type: integer
                format: int32
              degradedMachineCount:
                type: integer
                format: int32
              conditions:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    status:
                      type: string
                    lastTransitionTime:
                      type: string
                      format: date-time
                    reason:
                      type: string
                    message:
                      type: string
            x-kubernetes-preserve-unknown-fields: true
  scope: Cluster
  names:
    plural: machineconfigpools
    singular: machineconfigpool
    kind: MachineConfigPool
    shortNames:
    - mcp
EOF

    print_success "MachineConfigPool CRD created successfully"
}

# Function to create ContainerRuntimeConfig CRD
create_containerruntimeconfig_crd() {
    print_info "Creating ContainerRuntimeConfig CRD..."
    
    cat <<EOF | oc apply -f -
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: ${CONTAINERRUNTIMECONFIG_CRD_NAME}
  annotations:
    created-by: certsuite-mco-setup-script
spec:
  group: machineconfiguration.openshift.io
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              machineConfigPoolSelector:
                type: object
                properties:
                  matchLabels:
                    type: object
                    additionalProperties:
                      type: string
                  matchExpressions:
                    type: array
                    items:
                      type: object
              containerRuntimeConfig:
                type: object
                properties:
                  pidsLimit:
                    type: integer
                    format: int64
                  logSizeMax:
                    type: string
                  logLevel:
                    type: string
                  overlaySize:
                    type: string
                x-kubernetes-preserve-unknown-fields: true
            x-kubernetes-preserve-unknown-fields: true
          status:
            type: object
            x-kubernetes-preserve-unknown-fields: true
  scope: Cluster
  names:
    plural: containerruntimeconfigs
    singular: containerruntimeconfig
    kind: ContainerRuntimeConfig
    shortNames:
    - crc
EOF

    print_success "ContainerRuntimeConfig CRD created successfully"
}

# Function to create KubeletConfig CRD
create_kubeletconfig_crd() {
    print_info "Creating KubeletConfig CRD..."
    
    cat <<EOF | oc apply -f -
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: ${KUBELETCONFIG_CRD_NAME}
  annotations:
    created-by: certsuite-mco-setup-script
spec:
  group: machineconfiguration.openshift.io
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              machineConfigPoolSelector:
                type: object
                properties:
                  matchLabels:
                    type: object
                    additionalProperties:
                      type: string
                  matchExpressions:
                    type: array
                    items:
                      type: object
              kubeletConfig:
                type: object
                x-kubernetes-preserve-unknown-fields: true
            x-kubernetes-preserve-unknown-fields: true
          status:
            type: object
            x-kubernetes-preserve-unknown-fields: true
  scope: Cluster
  names:
    plural: kubeletconfigs
    singular: kubeletconfig
    kind: KubeletConfig
    shortNames:
    - kc
EOF

    print_success "KubeletConfig CRD created successfully"
}

# Function to create fake MachineConfigs
create_fake_machineconfigs() {
    local version=$1
    print_info "Creating fake MachineConfig resources..."
    
    # Create master MachineConfig
    cat <<EOF | oc apply -f -
apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfig
metadata:
  name: 00-master
  labels:
    machineconfiguration.openshift.io/role: master
  annotations:
    created-by: certsuite-mco-setup-script
    simulated-version: "${version}"
spec:
  config:
    ignition:
      version: 3.2.0
  kernelArguments: []
  fips: false
EOF

    # Create worker MachineConfig
    cat <<EOF | oc apply -f -
apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfig
metadata:
  name: 00-worker
  labels:
    machineconfiguration.openshift.io/role: worker
  annotations:
    created-by: certsuite-mco-setup-script
    simulated-version: "${version}"
spec:
  config:
    ignition:
      version: 3.2.0
  kernelArguments: []
  fips: false
EOF

    print_success "Fake MachineConfig resources created successfully"
}

# Function to create fake MachineConfigPools
create_fake_machineconfigpools() {
    local version=$1
    print_info "Creating fake MachineConfigPool resources..."
    
    # Create master MachineConfigPool
    cat <<EOF | oc apply -f -
apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfigPool
metadata:
  name: master
  annotations:
    created-by: certsuite-mco-setup-script
    simulated-version: "${version}"
spec:
  machineConfigSelector:
    matchLabels:
      machineconfiguration.openshift.io/role: master
  nodeSelector:
    matchLabels:
      node-role.kubernetes.io/master: ""
  configuration:
    name: rendered-master-fake
    source:
    - name: 00-master
status:
  observedGeneration: 1
  configuration:
    name: rendered-master-fake
    source:
    - name: 00-master
  machineCount: 1
  updatedMachineCount: 1
  readyMachineCount: 1
  unavailableMachineCount: 0
  degradedMachineCount: 0
  conditions:
  - type: Updated
    status: "True"
    lastTransitionTime: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
    reason: "AllNodesUpdated"
    message: "All nodes are updated with rendered-master-fake"
  - type: Updating
    status: "False"
    lastTransitionTime: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
    reason: "AllNodesUpdated"
    message: "All nodes are updated with rendered-master-fake"
  - type: Degraded
    status: "False"
    lastTransitionTime: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
    reason: "AsExpected"
    message: "All nodes are reporting Degraded=False"
EOF

    # Create worker MachineConfigPool
    cat <<EOF | oc apply -f -
apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfigPool
metadata:
  name: worker
  annotations:
    created-by: certsuite-mco-setup-script
    simulated-version: "${version}"
spec:
  machineConfigSelector:
    matchLabels:
      machineconfiguration.openshift.io/role: worker
  nodeSelector:
    matchLabels:
      node-role.kubernetes.io/worker: ""
  configuration:
    name: rendered-worker-fake
    source:
    - name: 00-worker
status:
  observedGeneration: 1
  configuration:
    name: rendered-worker-fake
    source:
    - name: 00-worker
  machineCount: 1
  updatedMachineCount: 1
  readyMachineCount: 1
  unavailableMachineCount: 0
  degradedMachineCount: 0
  conditions:
  - type: Updated
    status: "True"
    lastTransitionTime: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
    reason: "AllNodesUpdated"
    message: "All nodes are updated with rendered-worker-fake"
  - type: Updating
    status: "False"
    lastTransitionTime: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
    reason: "AllNodesUpdated"
    message: "All nodes are updated with rendered-worker-fake"
  - type: Degraded
    status: "False"
    lastTransitionTime: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
    reason: "AsExpected"
    message: "All nodes are reporting Degraded=False"
EOF

    print_success "Fake MachineConfigPool resources created successfully"
}

# Function to install fake MCO resources
install_fake_mco_resources() {
    local version=${1:-$DEFAULT_OPENSHIFT_VERSION}
    
    print_info "Setting up fake MCO resources for certsuite compatibility"
    print_info "Target version: ${version}"
    
    # Check if machineconfiguration.openshift.io API group exists, create CRDs if needed
    if ! oc api-resources --api-group=machineconfiguration.openshift.io &>/dev/null; then
        print_info "machineconfiguration.openshift.io API group not found, creating CRDs..."
        create_machineconfig_crd
        create_machineconfigpool_crd
        create_containerruntimeconfig_crd
        create_kubeletconfig_crd
    else
        print_info "machineconfiguration.openshift.io API group already exists"
        
        # Check and create individual CRDs if missing
        if ! machineconfig_crd_exists; then
            print_info "MachineConfig CRD not found, creating it..."
            create_machineconfig_crd
        fi
        
        if ! machineconfigpool_crd_exists; then
            print_info "MachineConfigPool CRD not found, creating it..."
            create_machineconfigpool_crd
        fi
        
        if ! containerruntimeconfig_crd_exists; then
            print_info "ContainerRuntimeConfig CRD not found, creating it..."
            create_containerruntimeconfig_crd
        fi
        
        if ! kubeletconfig_crd_exists; then
            print_info "KubeletConfig CRD not found, creating it..."
            create_kubeletconfig_crd
        fi
    fi
    
    # Wait for CRDs to be established
    print_info "Waiting for MCO CRDs to be established..."
    local timeout=30
    local count=0
    while ! oc get crd "$MACHINECONFIG_CRD_NAME" -o jsonpath='{.status.conditions[?(@.type=="Established")].status}' 2>/dev/null | grep -q "True"; do
        sleep 1
        count=$((count + 1))
        if [ $count -ge $timeout ]; then
            print_error "Timeout waiting for MCO CRDs to be established"
            exit 1
        fi
    done
    
    # Create fake MachineConfigs and MachineConfigPools
    create_fake_machineconfigs "$version"
    create_fake_machineconfigpools "$version"
    
    # Verify installation
    print_info "Verifying MCO installation..."
    
    if oc get machineconfigs --no-headers &>/dev/null; then
        print_success "✅ MachineConfigs can be listed successfully"
        local mc_count
        mc_count=$(oc get machineconfigs --no-headers | wc -l)
        print_info "Found $mc_count MachineConfig(s)"
    else
        print_error "❌ MachineConfigs verification failed"
        exit 1
    fi
    
    if oc get machineconfigpools --no-headers &>/dev/null; then
        print_success "✅ MachineConfigPools can be listed successfully"
        local mcp_count
        mcp_count=$(oc get machineconfigpools --no-headers | wc -l)
        print_info "Found $mcp_count MachineConfigPool(s)"
    else
        print_error "❌ MachineConfigPools verification failed"
        exit 1
    fi
    
    print_success "MCO compatibility setup complete!"
    print_success "Platform alteration tests should now be able to access MCO resources"
    echo
    print_info "You can now run platform alteration tests:"
    echo "  oc get machineconfigs"
    echo "  oc get machineconfigpools"
    echo
    print_info "To test the API availability:"
    echo "  oc api-resources --api-group=machineconfiguration.openshift.io"
}

# Function to remove fake MCO resources
remove_fake_mco_resources() {
    print_info "Removing fake MCO resources..."
    
    local removed_something=false
    
    # Remove MachineConfigs created by this script
    local machineconfigs
    machineconfigs=$(oc get machineconfigs -o jsonpath='{range .items[*]}{.metadata.name}{" "}{.metadata.annotations.created-by}{"\n"}{end}' 2>/dev/null | grep "certsuite-mco-setup-script" | awk '{print $1}' || echo "")
    
    for mc in $machineconfigs; do
        if [ -n "$mc" ]; then
            print_info "Removing MachineConfig '$mc'..."
            oc delete machineconfig "$mc"
            print_success "MachineConfig '$mc' removed"
            removed_something=true
        fi
    done
    
    # Remove MachineConfigPools created by this script
    local machineconfigpools
    machineconfigpools=$(oc get machineconfigpools -o jsonpath='{range .items[*]}{.metadata.name}{" "}{.metadata.annotations.created-by}{"\n"}{end}' 2>/dev/null | grep "certsuite-mco-setup-script" | awk '{print $1}' || echo "")
    
    for mcp in $machineconfigpools; do
        if [ -n "$mcp" ]; then
            print_info "Removing MachineConfigPool '$mcp'..."
            oc delete machineconfigpool "$mcp"
            print_success "MachineConfigPool '$mcp' removed"
            removed_something=true
        fi
    done
    
    # Remove MCO CRDs (be careful here - only remove if we created them)
    for crd_name in "$MACHINECONFIG_CRD_NAME" "$MACHINECONFIGPOOL_CRD_NAME" "$CONTAINERRUNTIMECONFIG_CRD_NAME" "$KUBELETCONFIG_CRD_NAME"; do
        if oc get crd "$crd_name" &> /dev/null; then
            local created_by_us
            created_by_us=$(oc get crd "$crd_name" -o jsonpath='{.metadata.annotations.created-by}' 2>/dev/null || echo "")
            if [[ "$created_by_us" == "certsuite-mco-setup-script" ]]; then
                print_info "Removing CRD '$crd_name'..."
                oc delete crd "$crd_name"
                print_success "CRD '$crd_name' removed"
                removed_something=true
            else
                print_warning "CRD '$crd_name' exists but was not created by this script, leaving it alone"
            fi
        else
            print_info "CRD '$crd_name' not found"
        fi
    done
    
    if [ "$removed_something" = true ]; then
        print_success "MCO cleanup complete!"
        print_info "Platform alteration tests will now fail with 'resource not found' errors"
    else
        print_info "Nothing to remove"
    fi
}

# Function to check current MCO status
check_mco_status() {
    print_info "Checking MCO resources status..."
    echo
    
    # Check API group
    if oc api-resources --api-group=machineconfiguration.openshift.io &>/dev/null; then
        print_success "machineconfiguration.openshift.io API group: EXISTS"
        print_info "Available resources:"
        oc api-resources --api-group=machineconfiguration.openshift.io --no-headers | awk '{print "  - " $1}'
    else
        print_warning "machineconfiguration.openshift.io API group: NOT FOUND"
    fi
    
    echo
    
    # Check MCO CRDs
    for crd_name in "$MACHINECONFIG_CRD_NAME" "$MACHINECONFIGPOOL_CRD_NAME" "$CONTAINERRUNTIMECONFIG_CRD_NAME" "$KUBELETCONFIG_CRD_NAME"; do
        crd_display_name=$(echo "$crd_name" | cut -d'.' -f1)
        if oc get crd "$crd_name" &> /dev/null; then
            print_success "$crd_display_name CRD: EXISTS"
            local created_by
            created_by=$(oc get crd "$crd_name" -o jsonpath='{.metadata.annotations.created-by}' 2>/dev/null || echo "unknown")
            echo "  Created by: $created_by"
        else
            print_warning "$crd_display_name CRD: NOT FOUND"
        fi
    done
    
    echo
    
    # Check MachineConfigs
    if oc get machineconfigs --no-headers &>/dev/null; then
        local mc_count
        mc_count=$(oc get machineconfigs --no-headers | wc -l)
        print_success "MachineConfigs: $mc_count found"
        if [ "$mc_count" -gt 0 ]; then
            print_info "MachineConfig list:"
            oc get machineconfigs --no-headers | awk '{print "  - " $1}'
        fi
    else
        print_warning "MachineConfigs: CANNOT LIST"
    fi
    
    # Check MachineConfigPools
    if oc get machineconfigpools --no-headers &>/dev/null; then
        local mcp_count
        mcp_count=$(oc get machineconfigpools --no-headers | wc -l)
        print_success "MachineConfigPools: $mcp_count found"
        if [ "$mcp_count" -gt 0 ]; then
            print_info "MachineConfigPool list:"
            oc get machineconfigpools --no-headers | awk '{print "  - " $1}'
        fi
    else
        print_warning "MachineConfigPools: CANNOT LIST"
    fi
    
    echo
    
    # Provide guidance based on status
    if oc api-resources --api-group=machineconfiguration.openshift.io &>/dev/null && oc get machineconfigs --no-headers &>/dev/null; then
        print_info "✅ MCO resources are available - platform alteration tests should work"
        echo
        print_info "Test commands:"
        echo "  oc get machineconfigs"
        echo "  oc get machineconfigpools"
        echo "  oc api-resources --api-group=machineconfiguration.openshift.io"
    else
        print_info "❌ MCO resources not found - platform alteration tests will fail"
        print_info "Run: $0 install  # to set up fake MCO resources"
    fi
}

# Main function
main() {
    local command="install"
    local version="$DEFAULT_OPENSHIFT_VERSION"
    
    # Parse arguments
    for arg in "$@"; do
        case "$arg" in
            install|remove|check|help)
                command="$arg"
                ;;
            --help|-h)
                show_usage
                exit 0
                ;;
            *)
                # If it's not a command or flag, treat as version
                if [[ "$command" == "install" ]] && [[ "$version" == "$DEFAULT_OPENSHIFT_VERSION" ]]; then
                    version="$arg"
                elif [[ "$arg" != "--help" ]] && [[ "$arg" != "-h" ]]; then
                    print_error "Unknown option: $arg"
                    show_usage
                    exit 1
                fi
                ;;
        esac
    done
    
    case "$command" in
        install)
            check_oc_command
            check_cluster_connection
            install_fake_mco_resources "$version"
            ;;
        remove)
            check_oc_command
            check_cluster_connection
            remove_fake_mco_resources
            ;;
        check)
            check_oc_command
            check_cluster_connection
            check_mco_status
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            print_error "Unknown command: $command"
            echo
            show_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
