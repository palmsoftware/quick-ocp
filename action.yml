name: 'Quick OCP'
description: 'Quickly deploy an OpenShift cluster on Github Actions hosted runners'
inputs:
  ocpPullSecret:
    description: 'Pull secret for OpenShift Local'
    required: true
  crcMemory:
    description: 'Memory Allocation for OpenShift Local'
    required: false
    default: '10752'
  crcCpu:
    description: 'CPU Allocation for OpenShift Local'
    required: false
    default: '4'
  enableTelemetry:
    description: 'Enable telemetry for OpenShift Local'
    required: false
    default: 'yes'
  crcDiskSize:
    description: 'Disk size for OpenShift Local'
    required: false
    default: '35'
  bundleCache:
    description: 'Cache the crc bundles for faster startup'
    required: false
    default: 'false'
  waitForOperatorsReady:
    description: 'Wait for all operators to be ready'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Download and Install OpenShift Local Binary
      shell: bash
      run: |
        curl -L -o crc.tar.xz https://mirror.openshift.com/pub/openshift-v4/clients/crc/latest/crc-linux-amd64.tar.xz
        tar -xvf crc.tar.xz
        sudo mv crc-linux-*/crc /usr/local/bin

    - name: CRC version lookup from crc
      shell: bash
      run: |
        crc version
        echo $PATH
        VERSION_NUMBER=$(crc version | grep CRC | awk '{ print $3 }')
        echo $VERSION_NUMBER
        echo $(crc version | grep CRC | awk '{ print $3 }')
        echo "version_number=$(crc version | grep CRC | awk '{ print $3 }')" | tee "${GITHUB_OUTPUT}"
      id: crc_version_lookup

    - name: OCP version lookup from crc
      shell: bash
      run: |
        crc version
        echo $(crc version | grep OpenShift | awk '{ print $3 }')
        echo "ocp_version=$(crc version | grep OpenShift | awk '{ print $3 }')" | tee "${GITHUB_OUTPUT}"
      id: ocp_version_lookup

    - name: Restore CRC bundles from the cache
      uses: actions/cache/restore@v4
      if: ${{ inputs.bundleCache == 'true' }}
      id: restore-cache
      with:
        path: /home/runner/.crc/bundletmp
        key: ${{ runner.os }}-${{ runner.arch }}-crc-cache-${{ steps.crc_version_lookup.outputs.version_number }}

    - name: Copy the bundletmp to actual folder if cache hit
      if: steps.restore-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        mkdir -p /home/runner/.crc/cache
        cp -r /home/runner/.crc/bundletmp/* /home/runner/.crc/cache/

    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        large-packages: true
        android: true
        dotnet: true
        haskell: true
        docker-images: true
        swap-storage: true
      continue-on-error: true

    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt install qemu-kvm libvirt-daemon libvirt-daemon-system network-manager jq libvirt-daemon-driver-qemu virtiofsd -y

    - name: Ubuntu 22.04 dependencies
      if: ${{ matrix.os == 'ubuntu-22.04' }}
      shell: bash
      run: |
        sudo apt-get install -y qemu
    
    # - name: Ubuntu 24.04 dependencies
    #   if: ${{ matrix.os == 'ubuntu-24.04' }}
    #   shell: bash
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y virtiofsd libvirt-daemon-system libvirt-daemon-driver-qemu
    #     if systemctl list-unit-files | grep -q virtqemud.socket; then
    #       sudo systemctl enable virtqemud.socket
    #       sudo systemctl start virtqemud.socket
    #     else
    #       echo "virtqemud.socket unit file does not exist. Skipping enable/start steps."
    #     fi

    - name: Enable KVM group perms
      shell: bash
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
        sudo apt-get update
        sudo apt-get install -y libvirt-clients libvirt-daemon-system libvirt-daemon virtinst bridge-utils qemu-system-x86
        sudo usermod -a -G kvm,libvirt $USER
        sudo adduser `id -un` libvirt

    - name: Ubuntu 20.04 Specific
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      shell: bash
      run: |
        sudo apt-get upgrade -y

    # If there is no /etc/docker/daemon.json, create it.
    - name: Create /etc/docker/daemon.json
      shell: bash
      run: |
        if [ ! -f /etc/docker/daemon.json ]; then
          echo "{}" | sudo tee /etc/docker/daemon.json
        fi

    # Restart docker using /mnt/docker-storage (sdb) instead of /var/lib/docker (sda).
    # This step needs to be done right after the partner repo's bootstrap scripts, as they
    # overwrite the docker's daemon.json.
    - name: Make docker to use /mnt (sdb) for storage
      shell: bash
      run: |
        df -h
        lsblk
        sudo mkdir /mnt/docker-storage
        sudo jq '.  +={"data-root" : "/mnt/docker-storage"}' < /etc/docker/daemon.json > /tmp/docker-daemon.json
        sudo cp /tmp/docker-daemon.json /etc/docker/daemon.json
        cat /etc/docker/daemon.json
        sudo systemctl restart docker
        sudo ls -la /mnt/docker-storage

    - name: reload the terminal to load the libvirt group
      shell: bash
      run: |
        sudo -E bash -c 'exec su -l '$USER

    - name: Check if user is part of libvirt group
      shell: bash
      run: |
        groups
        sudo usermod -a -G libvirt $USER
        groups
      
    - name: Write the pull secret to json file
      shell: bash
      run: |
        echo ${{ inputs.ocpPullSecret }} > pull-secret.json

    - name: Prompt the user if bundleCache is false
      if: ${{ inputs.bundleCache == false }}
      shell: bash
      run: echo "Skipping cache restore due to bundleCache being false"

    - name: Start OpenShift Local
      shell: bash
      run: |
        crc config set cpus ${{ inputs.crcCpu }}
        crc config set memory ${{ inputs.crcMemory }}
        crc config set disk-size ${{ inputs.crcDiskSize }}
        crc config set consent-telemetry ${{ inputs.enableTelemetry }}
        crc config set network-mode user

    - name: Run setup
      shell: bash
      run: |
        sudo -su $USER crc setup --log-level debug --show-progressbars
        sudo -su $USER crc start --pull-secret-file pull-secret.json --log-level debug

    - name: Move the .crcbundle files to another temporary folder
      shell: bash
      run: |
        mkdir -p /home/runner/.crc/bundletmp
        mv /home/runner/.crc/cache/*.crcbundle /home/runner/.crc/bundletmp/

    - name: Cache the crc bundles using github actions cache
      uses: actions/cache/save@v4
      if: ${{ inputs.bundleCache == 'true' && steps.restore-cache.outputs.cache-hit != 'true' }}
      with:
        path: /home/runner/.crc/bundletmp
        key: ${{ steps.restore-cache.outputs.cache-primary-key }}

    - name: Remove the bundle to save space
      shell: bash
      run: |
        rm -rf /home/runner/.crc/bundletmp

    - name: Print the disk statistics
      shell: bash
      run: |
        df -h

    - name: Bootstrap the runner with kubectl and oc clients
      shell: bash
      run: |
        sudo ${{ github.action_path }}/scripts/install-oc-tools.sh --latest ${{ steps.ocp_version_lookup.outputs.ocp_version }}

    - name: Wait until node is Ready state
      shell: bash
      run: |
        while [[ $(oc get nodes --request-timeout='30s' -o json | jq -r '.items[] | select(.metadata.name=="api.crc.testing") | .status.conditions[] | select(.reason=="KubeletReady") | .status') == "False" ]]; do
          echo "Waiting for node to be in Ready state"
          sleep 5
        done

    - name: Set the adm policy
      shell: bash
      run: |
        oc adm policy add-scc-to-user privileged user
        oc adm policy add-scc-to-group privileged system:authenticated

    - name: Wait for operators to be available
      if: ${{ inputs.waitForOperatorsReady == 'true' }}
      shell: bash
      run: ${{ github.action_path }}/scripts/wait-for-operators.sh
